package com.service.employee.service;

import java.util.List;
import java.util.Optional;import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.service.employee.entity.Employee;
import com.service.employee.exceptions.CustomExceptions;
import com.service.employee.exceptions.DataAlreadyExistException;
import com.service.employee.exceptions.ResourceNotFoundException;
import com.service.employee.repo.EmployeeRepository;
import com.service.employee.utils.EmployeeUtils;

@Service
public class EmployeeServiceImpl implements EmployeeService{
	


	@Autowired EmployeeRepository empRepo;
	@Autowired ModelMapper mapper;
	
	private EmployeeUtils ModelToUtil(Employee employee) {
		EmployeeUtils utils = new EmployeeUtils();
		mapper.map(employee, utils);
		return utils;
	}
	
	private Employee utilToModel(EmployeeUtils empUtil) {
		Employee emp = new Employee();
		mapper.map(empUtil, emp);
		return emp;
	}
	@Override
	public EmployeeUtils createEmployee(EmployeeUtils empUtil) {
		if(checkIfEmpAlreadyExist(empUtil.getEmpEmail())==null) {
			try {
				return ModelToUtil(empRepo.save(utilToModel(empUtil)));
			} catch (Exception e) {
				throw new CustomExceptions(e.getMessage(),empUtil);
			}
		}
		throw new CustomExceptions("Employee with this Email Already Exist : ", empUtil.getEmpEmail());
	}
	private Employee checkIfEmpAlreadyExist(String empEmail) {
		Optional<Employee> empByEmail = empRepo.findByEmpEmail(empEmail);
		if(empByEmail.isPresent()) {
			return empByEmail.get();
		}
		return null;
	}

	@Override
	public EmployeeUtils findEmpByEmail(String email) {
	   Employee byEmail = checkIfEmpAlreadyExist(email);
	   if(byEmail!=null) {
		   return ModelToUtil(byEmail);
	   }
		throw new ResourceNotFoundException("Employee", "email", email);
	}

	@Override
	public List<EmployeeUtils> findEmpsByOrgEmail(String orgEmail) {
		List<Employee> employees = empRepo.findByOrgEmail(orgEmail);
		if(employees!=null && !employees.isEmpty())
			employees.stream().map(emp->ModelToUtil(emp)).collect(Collectors.toList());
//			return employees.forEach(empUtils->ModelToUtil(empUtils));
		throw new ResourceNotFoundException("employees", "organisation Email", orgEmail);
		
	}

}
